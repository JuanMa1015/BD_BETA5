/*---------Creación de tablas---------*/



--CREATE DATABASE PRUEBAFINAL;

USE PRUEBAFINAL;

--Tabla Genero
	CREATE TABLE GENEROS (
	Masculino VARCHAR (10),
	Femenino VARCHAR (10),
	LGTBIQ VARCHAR (10),
	No_Especifica VARCHAR (20)
	);

	INSERT INTO  GENEROS VALUES
		('Masculino', 'Femenino', 'LGTBIQ+', 'No_Especifica');

-- Tabla CATEGORIAS

	CREATE TABLE CATEGORIAS(
    Masculino VARCHAR(10),
    Femenino VARCHAR(10),
    Mixto VARCHAR(50),
    No_Especifica VARCHAR(20)
);
	INSERT INTO CATEGORIAS
	VALUES ('Masculino', 'Femenino', 'Mixto', 'No especifica');


-- Tabla TORNEOS
	CREATE TABLE TORNEOS (
		id_Torneo INT IDENTITY(1,1) PRIMARY KEY, 
		Nombre_Torneo VARCHAR(50),
		Categoria_T VARCHAR(20),
		Fecha_Inicio DATETIME,
		Fecha_Final DATETIME,
		Ubicacion_T VARCHAR(30),
		Reglas_Especificas VARCHAR(100),
		Estado BIT NOT NULL DEFAULT 1
	);
		CREATE INDEX idx_Torneo ON TORNEOS (Nombre_Torneo);

-- Tabla REGISTRO_EQUIPOS
	CREATE TABLE REGISTRO_EQUIPOS (
		id_Equipo INT IDENTITY(1,1) PRIMARY KEY,
		id_Torneo INT,
		Nombre VARCHAR(50),
		Categoria VARCHAR(20),
		Cantidad_Jugadores INT,
		Patrocinadores VARCHAR(50),
		Estado BIT NOT NULL DEFAULT 1,
		FOREIGN KEY (id_Torneo) REFERENCES TORNEOS (id_Torneo),
	);
	ALTER TABLE REGISTRO_EQUIPOS
		ADD CONSTRAINT UC_Equipos UNIQUE (Nombre);

-- Tabla Torneo_Equipos
	CREATE TABLE Torneo_Equipos (
		id_Torneo INT,
		id_Equipo INT,
		FOREIGN KEY (id_Torneo) REFERENCES TORNEOS (id_Torneo),
		FOREIGN KEY (id_Equipo) REFERENCES REGISTRO_EQUIPOS (id_Equipo)
	);

-- Tabla REGISTRO_JUGADOR
	CREATE TABLE REGISTRO_JUGADOR (
		id_Jugador INT IDENTITY(1,1) PRIMARY KEY,
		id_Equipo INT,
		Nombre VARCHAR(50),
		Apellido VARCHAR(50),
		Documento VARCHAR(15),
		Edad INT NOT NULL,
		Genero VARCHAR(50),
		Telefono VARCHAR(14),
		Correo VARCHAR(50),
		Estado BIT NOT NULL DEFAULT  1
		FOREIGN KEY (id_Equipo) REFERENCES REGISTRO_EQUIPOS (id_Equipo),
	);

-- Tabla PROGRAMACION
	CREATE TABLE PROGRAMACION (
		id_Programacion INT IDENTITY(1,1) PRIMARY KEY,
		id_Torneo INT,
		Fecha DATETIME,
		Hora DATETIME,
		Ubicacion VARCHAR(50),
		Equipo_local VARCHAR(50),
		VS CHAR(2) DEFAULT 'VS',
		Equipo_visitante VARCHAR(50),
		Estado BIT NOT NULL DEFAULT 1,
		FOREIGN KEY (id_Torneo) REFERENCES TORNEOS (id_Torneo),
		FOREIGN KEY (Equipo_local) REFERENCES REGISTRO_EQUIPOS (Nombre),
		FOREIGN KEY (Equipo_visitante) REFERENCES REGISTRO_EQUIPOS (Nombre)
	);

	ALTER TABLE PROGRAMACION
		ADD CONSTRAINT UC_Fecha UNIQUE (Fecha);

-- Tabla RESULTADOS
	CREATE TABLE RESULTADOS (
		id_Resultado INT IDENTITY(1,1) PRIMARY KEY,
		id_Torneo INT,
		Equipo_local VARCHAR(50),
		VS CHAR(2) DEFAULT 'VS',
		Equipo_visitante VARCHAR(50),
		Marcador VARCHAR(50),
		Ganador VARCHAR(50),
		Perdedor VARCHAR(50),
		Empate VARCHAR(50),
		Evento_Destacado VARCHAR(100),
		FOREIGN KEY (id_Torneo) REFERENCES TORNEOS (id_Torneo),
		FOREIGN KEY (Equipo_local) REFERENCES REGISTRO_EQUIPOS (Nombre),
		FOREIGN KEY (Equipo_visitante) REFERENCES REGISTRO_EQUIPOS (Nombre)
	);

	ALTER TABLE RESULTADOS
		ADD	Estado BIT NOT NULL DEFAULT 1;

	ALTER TABLE RESULTADOS
		ADD CONSTRAINT UC_Resultados UNIQUE (Marcador, Evento_Destacado);

-- Tabla POSICIONES
	CREATE TABLE POSICIONES (
		id_Posicion INT IDENTITY(1,1) PRIMARY KEY,
		Equipo VARCHAR(50),
		Encuentros VARCHAR(50),
		Victorias VARCHAR(50),
		Derrotas VARCHAR(50),
		Empates VARCHAR(50),
		FOREIGN KEY (Equipo) REFERENCES REGISTRO_EQUIPOS (Nombre)
	);

-- Tabla HISTORIAL
	CREATE TABLE HISTORIAL (
		id_Historial INT IDENTITY(1,1) PRIMARY KEY,
		id_Torneo INT,
		Fecha DATETIME,
		Equipo_local VARCHAR(50),
		VS CHAR(2) DEFAULT 'VS',
		Equipo_visitante VARCHAR (50),
		Marcador VARCHAR(50),
		Evento_Destacado VARCHAR(100),
		FOREIGN KEY (id_Torneo) REFERENCES TORNEOS (id_Torneo),
		FOREIGN KEY (Fecha) REFERENCES PROGRAMACION (Fecha),
		FOREIGN KEY (Equipo_local) REFERENCES REGISTRO_EQUIPOS (Nombre),
		FOREIGN KEY (Equipo_visitante) REFERENCES REGISTRO_EQUIPOS (Nombre),
		FOREIGN KEY (Marcador, Evento_Destacado) REFERENCES RESULTADOS (Marcador, Evento_Destacado)
	);


/*---------Procedimientos almacenados---------*/

USE PRUEBAFINAL

GO
	CREATE PROCEDURE SP_Registro_Datos_TORNEOS
		@Nombre_Torneo VARCHAR(50),
		@Categoria VARCHAR (20),
		@Fecha_Inicio DATE,
		@Ubicacion_T VARCHAR(50),
		@Reglas_Especificas VARCHAR(100),
		@Estado BIT,
		@Id_Torneo INT OUTPUT -- Parámetro de salida para el id_Torneo
	AS
	BEGIN
		IF @Nombre_Torneo IS NULL OR @Categoria IS NULL OR @Fecha_Inicio IS NULL OR @Ubicacion_T IS NULL OR @Reglas_Especificas IS NULL
			BEGIN
				THROW 51000, 'Los parámetros no pueden ser NULL', 1;
			END
		ELSE
			BEGIN
				INSERT INTO TORNEOS (Nombre_Torneo, Categoria_T, Fecha_Inicio, Ubicacion_T, Reglas_Especificas, Estado)
				VALUES (@Nombre_Torneo, @Categoria, @Fecha_Inicio, @Ubicacion_T, @Reglas_Especificas, @Estado)
				SET @Id_Torneo = SCOPE_IDENTITY(); -- Recuperar el id_Torneo generado
		END
	END


--Tabla RegistroJugadores
GO
	CREATE PROCEDURE SP_Registro_Datos_Jugadores
		@id_Equipo INT,
		@Nombre VARCHAR(50),
		@Apellido VARCHAR(50),
		@Documento VARCHAR(50),
		@Edad INT,
		@Genero VARCHAR (50),
		@Telefono VARCHAR(50),
		@Correo VARCHAR(50),
		@Estado BIT
	AS
	BEGIN
			IF @id_Equipo IS NULL OR @Nombre IS NULL OR @Apellido IS NULL OR @Documento IS NULL OR @Edad IS NULL OR @Genero IS NULL OR @Telefono IS NULL OR @Correo IS NULL
				BEGIN
					THROW 51000, 'Los parámetros no pueden ser NULL', 1;
				END
			ELSE
				BEGIN
					INSERT INTO REGISTRO_JUGADOR (id_Equipo, Nombre, Apellido, Documento, Edad, Genero, Telefono, Correo, Estado)
					VALUES (@id_Equipo, @Nombre, @Apellido, @Documento, @Edad, @Genero, @Telefono, @Correo, @Estado)
			END
	END
--
--Tabla Registro Equipo
GO
	CREATE PROCEDURE SP_Registro_Datos_Equipos
		@Id_Torneo INT,
		@Nombre VARCHAR(50),
		@Categoria VARCHAR (20),
		@Cantidad_Jugadores INT,
		@Patrocinadores VARCHAR(50),
		@Estado BIT
	AS
	BEGIN
		IF @Id_Torneo IS NULL OR @Nombre IS NULL OR @Categoria IS NULL OR @Cantidad_Jugadores IS NULL OR @Patrocinadores IS NULL
			BEGIN
				THROW 51000, 'Los parámetros no pueden ser NULL', 1;
			END
		ELSE
			BEGIN
				INSERT INTO REGISTRO_EQUIPOS (id_Torneo, Nombre, Categoria, Cantidad_Jugadores, Patrocinadores, Estado)
				VALUES (@Id_Torneo, @Nombre, @Categoria, @Cantidad_Jugadores, @Patrocinadores,@Estado)
			END
	END

--Tabla Programacion
GO
	CREATE PROCEDURE SP_REGISTRO_DATOS_PROGRAMACION
		@Id_Torneo INT,
		@Fecha DATETIME,
		@Hora DATETIME,
		@Ubicacion VARCHAR(50),
		@Equipo_Local VARCHAR(50),
		@VS CHAR(3),
		@Equipo_Visitante VARCHAR(50)
	AS
	BEGIN
		IF @Id_Torneo IS NULL OR @Fecha IS NULL OR @Hora IS NULL OR @Ubicacion IS NULL OR @Equipo_Local IS NULL OR @VS IS NOT NULL OR  @Equipo_Visitante IS NULL
			BEGIN
				THROW 51000, 'Los parámetros no pueden ser NULL', 1;
			END
		ELSE
			BEGIN
				INSERT INTO PROGRAMACION (id_Torneo, Fecha, Hora, Ubicacion, Equipo_local, VS, Equipo_visitante)
				VALUES (@Id_Torneo, @Fecha, @Hora, @Ubicacion, @Equipo_Local, @VS, @Equipo_Visitante)
			END
	END


-- Tabla Resultados
	CREATE PROCEDURE SP_REGISTRAR_DATOS_RESULTADOS
		@Id_Torneo INT,
		@Equipo_Local VARCHAR(50),
		@VS VARCHAR(3),
		@Equipo_Visitante VARCHAR(50),
		@Marcador VARCHAR(50),
		@Ganador VARCHAR(50),
		@Perdedor VARCHAR(50),
		@Empate CHAR(1),
		@Evento_Destacado VARCHAR(100)
	AS
	BEGIN
		IF @Id_Torneo IS NULL OR @Equipo_Local IS NULL OR @VS IS NOT NULL OR @Equipo_Visitante IS NULL OR @Marcador IS NULL OR @Ganador IS NOT NULL OR @Perdedor IS NOT NULL OR @Empate IS  NOT NULL OR @Evento_Destacado IS NOT NULL
			BEGIN
				THROW 51000, 'Los parámetros no pueden ser NULL', 1;
			END
		ELSE
			BEGIN
				INSERT INTO RESULTADOS (id_Torneo, Equipo_Local, VS, Equipo_Visitante, Marcador, Ganador, Perdedor, Empate, Evento_Destacado)
				VALUES (@Id_Torneo, @Equipo_Local,@VS, @Equipo_Visitante, @Marcador, @Ganador, @Perdedor, @Empate, @Evento_Destacado)
			END
	END

-- Tabla Posiciones
GO
	CREATE PROCEDURE SP_REGISTRAR_DATOS_POSICIONES
		@Equipo VARCHAR(50),
		@Encuentros VARCHAR(50),
		@Victorias VARCHAR(50),
		@Derrotas VARCHAR(50),
		@Empates VARCHAR(50)
	AS
	BEGIN
		IF @Equipo IS NULL OR @Encuentros IS NULL OR @Victorias IS NULL OR @Derrotas IS NULL OR @Empates IS NULL
			BEGIN
				THROW 51000, 'Los parámetros no pueden ser NULL', 1;
			END
		ELSE
			BEGIN
				INSERT INTO POSICIONES (Equipo, Encuentros, Victorias, Derrotas, Empates)
				VALUES (@Equipo, @Encuentros, @Victorias, @Derrotas, @Empates)
			END
	END

/*---------Creación de triggers---------*/

use PRUEBAFINAL
--DISPARADORES PARA TABLA POSICIONES

--cada que se registre un resultado a los dos 
--equipos se les sumara un encuentro
GO
	CREATE TRIGGER Actualizar_Posiciones
	ON RESULTADOS
	AFTER INSERT
	AS
	IF (SELECT COUNT (*) FROM RESULTADOS)>0
	BEGIN 
	UPDATE POSICIONES
	SET
		Encuentros = Encuentros + 1
	WHERE Equipo IN (SELECT Equipo_local FROM RESULTADOS ) 
	OR Equipo IN (SELECT Equipo_visitante FROM RESULTADOS) 
END;	

--Cada que se ponga 'Si' en empate se le sumara 1 empate a cada equipo
CREATE TRIGGER Actualizacion_Empates
ON RESULTADOS
AFTER INSERT
AS
BEGIN
    IF EXISTS (SELECT * FROM RESULTADOS WHERE Empate = 'Si')
    BEGIN
        -- Actualizar empates para los equipos locales
        UPDATE POSICIONES
        SET Empates = Empates + 1
        WHERE Equipo IN (SELECT Equipo_local FROM INSERTED WHERE Empate = 'Si');
        
        -- Actualizar empates para los equipos visitantes
        UPDATE POSICIONES
        SET Empates = Empates + 1
        WHERE Equipo IN (SELECT Equipo_visitante FROM INSERTED WHERE Empate = 'Si');
    END
	END


CREATE TRIGGER Actualizar_Victorias
ON RESULTADOS 
AFTER INSERT
AS 
BEGIN 
UPDATE POSICIONES
SET Victorias = Victorias + 1
FROM POSICIONES
JOIN inserted ON POSICIONES.Victorias = inserted.Ganador
END;


CREATE TRIGGER Actualizar_Derrotas
ON RESULTADOS
AFTER INSERT 
AS 
BEGIN
UPDATE POSICIONES
SET Derrotas = Derrotas + 1 
FROM POSICIONES
JOIN inserted ON POSICIONES.Derrotas = inserted.Perdedor
END;


--
SELECT RE.id_Equipo, RE.Nombre
FROM REGISTRO_EQUIPOS RE
JOIN REGISTRO_EQUIPOS TE ON RE.id_Equipo = TE.id_Equipo
WHERE TE.id_Torneo = 2;

--
DBCC CHECKIDENT ('POSICIONES',RESEED,0)

--Cuando se seleccione un torneo, tienen que salir los equipos que se registraron en dicho torne-----
SELECT RE.id_Equipo, RE.Nombre
FROM REGISTRO_EQUIPOS RE
JOIN REGISTRO_EQUIPOS TE ON RE.id_Equipo = TE.id_Equipo
WHERE TE.id_Torneo = 1;
